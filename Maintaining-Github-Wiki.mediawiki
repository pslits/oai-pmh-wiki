= Maintaining the GitHub Wiki =

== Introduction ==

A GitHub Wiki is a powerful tool for documenting projects, providing a user-friendly interface for creating and managing content. However, the default editing experience can be limiting, especially for collaborative projects. The limitations of the GitHub Wiki include:

* '''Immediate Live Changes''': Changes made in the wiki are live immediately, which can lead to accidental overwrites or incomplete documentation being published.
* '''Limited Collaboration Support''': The GitHub Wiki does not support pull requests or code reviews, making it difficult to manage contributions from multiple authors.
* '''Basic Version Control''': While GitHub provides version control, the wiki's interface does not leverage this effectively, making it hard to track changes or revert to previous versions.

To address these challenges, a more structured approach to maintaining the wiki is proposed. This approach involves using GitHub's version control capabilities more effectively and enhancing collaboration among contributors. The solution is to improve the GitHub Wiki experience by using a separate repository for wiki content. This separate repository mirrors the GitHub Wiki but allows for a more professional development workflow. Contributers can:

* '''Propose Edits via Pull Requests''': Contributors can create branches and pull requests for their changes, allowing for code reviews and discussions before merging.
* '''Collaborate Effectively''': Multiple contributors can work on different branches, making it easier to manage contributions and avoid conflicts.
* '''Leverage Continuous Integration (CI)''': The separate repository can be integrated with GitHub Actions to automate the process of pushing changes to the actual GitHub Wiki. This ensures that only approved changes are published, and the process is transparent and traceable.

This setup brings the benefits of software development best practices to documentation. Version control becomes reliable and transparent, accidental overwrites are avoided, and the review process ensures higher-quality contributions. Automated GitHub Actions are used to synchronize the content of the `oai-pmh-wiki` repository with the actual GitHub Wiki, ensuring that only approved changes are published.

This approach is inspired by tutorials and experiences shared by the developer community. A notable example is the article ["The Secret GitHub Wiki Repo and CI/CD for Docs"](https://medium.com/@thecybermonk/the-secret-github-wiki-repo-and-ci-cd-for-docs-fafe2583b72e) by Sami Jawhar, which discusses the use of a separate GitHub repository for wiki content and the integration of CI/CD workflows to automate the process of pushing changes to the wiki. This article provides valuable insights into the benefits of using a separate repository for wiki content and how to set up a CI/CD pipeline for documentation. It is later also described in the [GitHub Wiki Tutorial for Technical Wiki Documentation](https://sparkbox.com/foundry/github_wiki_tutorial_for_technical_wiki_documentation) by Sparkbox, which outlines how to use a separate Git repository for wiki content while still leveraging GitHub Actions for automation.

For further information and context:

* GitHub Docs: [Creating and viewing wiki pages](https://docs.github.com/en/communities/documenting-your-project-with-wikis/creating-and-viewing-wiki-pages)
* GitHub Actions: [Creating a GitHub Action](https://docs.github.com/en/actions/creating-actions)

This guide provides step-by-step instructions for contributing to the wiki using this new workflow. Whether you're fixing a typo, adding a diagram, or documenting an entire feature, you'll learn how to make and propose changes in a way that is maintainable, reviewable, and traceable.

== Setup of the separate repository ==

The wiki is maintained in a separate repository called ''oai-pmh-wiki''. This repository contains all the markdown files and assets used in the wiki. The actual GitHub Wiki is a separate repository called ''oai-pmh.wiki''.

=== Creating the separate repository ===
To set up the separate repository, follow these steps:
# Clone the ''oai-pmh.wiki'' repository
# Rename the cloned directory to ''oai-pmh-wiki''
# Create a new repository on GitHub named ''oai-pmh-wiki''
# Remove the origin from the cloned repository
# Add the new repository as the origin
# Push the cloned repository to the new GitHub repository

=== Create workflow ===
# Create a new directory called <code>.github/workflows</code> in the ''oai-pmh-wiki'' repository.
# Inside this directory, create a new file called <code>push-wiki.yml</code>.
# Add the following content to the <code>push-wiki.yml</code> file:

== Repository Structure ==

The repository structure is as follows:
* '''oai-pmh-wiki''': The main repository where all wiki content is stored and versioned.
* '''oai-pmh.wiki''': The actual GitHub Wiki repository, which is a mirror of the ''oai-pmh-wiki'' repository.

== How It Works ==

* The ''oai-pmh.wiki'' repository is a GitHub Wiki that is automatically updated from the ''oai-pmh-wiki'' repository.
* The ''oai-pmh-wiki'' repository is where all contributors work on the wiki content.
* Contributors can clone the ''oai-pmh-wiki'' repository, make changes, and submit pull requests.
* The pull requests are reviewed and merged into the ''master'' branch of the ''oai-pmh-wiki'' repository.
* Once a pull request is merged, a GitHub Action is triggered to push the changes to the ''oai-pmh.wiki'' repository.

== How to Make Changes ==

To make changes to the wiki, follow these steps:
# Clone the ''oai-pmh-wiki'' repository to your local machine.
    
<syntaxhighlight lang="bash">
git clone https://github.com/pslits/oai-pmh-wiki.git
cd oai-pmh-wiki
</syntaxhighlight>

# Create a new branch for your changes.

<syntaxhighlight lang="bash">
git checkout -b update-wiki-section
</syntaxhighlight>

# Make your edits to the markdown files in the repository.
    * For example, if you want to update the section on harvesting, edit the corresponding markdown file.
    * You can also create new markdown files or folders as needed.

# Commit your changes and push them to the new branch.

<syntaxhighlight lang="bash">
git add .
git commit -m "Update wiki section on harvesting"
git push origin update-wiki-section
</syntaxhighlight>

# Open a pull request from your branch into the ''master'' branch of the ''oai-pmh-wiki'' repository.
    * Go to the ''oai-pmh-wiki'' repository on GitHub.
    * Click on the ''Pull requests'' tab.
    * Click on the ''New pull request'' button.
    * Select your branch from the dropdown menu and click ''Create pull request''.
    * Add a title and description for your pull request, explaining the changes you made.
# Once the pull request is reviewed and approved, it will be merged into the ''master'' branch.
    * This triggers a GitHub Action that automatically pushes the changes to the actual GitHub Wiki (''oai-pmh.wiki'').

== Setting Up GitHub Secrets ==

To enable the GitHub Action to push changes to the ''oai-pmh.wiki'' repository, you need to set up some repository secrets in the ''oai-pmh-wiki'' repository. These secrets are used for authentication and commit attribution.
* Go to the ''oai-pmh-wiki'' repository on GitHub.
* Click on the ''Settings'' tab.
* In the left sidebar, click on ''Secrets and variables''.
* Click on ''Actions''.
* Click on the ''New repository secret'' button.
* Add the following secrets:
{| class="wikitable"
! Name !! Description
|-
| API_KEY || GitHub Personal Access Token with <code>repo</code> & <code>wiki</code> access
|-
| USERNAME || Your GitHub username (used for commit attribution)
|-
| EMAIL || Your GitHub email (used for commit attribution)
|}

== CI Workflow (Simplified) ==

The GitHub Action workflow is defined in the <code>.github/workflows/push-wiki.yml</code> file. This workflow is triggered whenever a pull request is merged into the ''master'' branch of the ''oai-pmh-wiki'' repository.
The workflow performs the following steps:
# Clones the ''oai-pmh-wiki'' repository.
# Remove origin from the cloned repository.
# Adds the ''oai-pmh.wiki'' repository as the new origin.
# Configures Git with the provided username and email for commit attribution.
# Pushes the changes from the ''master'' branch of the ''oai-pmh-wiki'' repository to the ''oai-pmh.wiki'' repository.

This ensures all changes go through code review and version control.
